---
import BaseLayout from "@layouts/BaseLayout.astro"
import { CollectionEntry, getCollection } from "astro:content"

const books: Array<CollectionEntry<"book">> = await getCollection("books")

const MONTHS = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
]

const currentlyReading: CollectionEntry<"book"> = []
const booksToDisplay = books
  .sort(
    (b1, b2) =>
      new Date(b2.data.finishedReading).getTime() -
      new Date(b1.data.finishedReading).getTime(),
  )
  .reduce((finished, book) => {
    if (!book.data.finishedReading) {
      currentlyReading.push(book)
      return finished
    }
    const dateFinished = new Date(book.data.finishedReading)
    const yearFinished = dateFinished.getFullYear()
    const monthFinished = MONTHS[dateFinished.getMonth()]
    if (!finished[yearFinished]) {
      finished[yearFinished] = { total: 0, books: {} }
    }
    if (!finished[yearFinished].books[monthFinished]) {
      finished[yearFinished].books[monthFinished] = []
    }
    finished[yearFinished].books[monthFinished].push(book)
    finished[yearFinished].total += 1
    return finished
  }, {})
---

<BaseLayout pageTitle="Book Log â€¢ Evan Freeze">
  <h1>Book Log</h1>
  {
    (
      <details class="years" open>
        <summary>Reading</summary>
        <ul>
          {currentlyReading
            .sort(
              (b1, b2) =>
                new Date(b2.data.startedReading).getTime() -
                new Date(b1.data.startedReading).getTime(),
            )
            .map((book) => (
              <li>
                <h3>
                  <a href={`/book-log/${book.slug}`}>
                    {book.data.title} <span>by {book.data.author}</span>
                  </a>
                </h3>
              </li>
            ))}
        </ul>
      </details>
    )
  }
  {
    Object.keys(booksToDisplay)
      .reverse()
      .map((year) => (
        <details
          class="years"
          open={year === new Date().getFullYear().toString()}
        >
          <summary>
            {year} <span>({booksToDisplay[year].total})</span>
          </summary>
          {Object.keys(booksToDisplay[year].books).map((month) => (
            <details class="months" open>
              <summary>
                {month}{" "}
                <span>({booksToDisplay[year].books[month].length})</span>
              </summary>
              <ul>
                {booksToDisplay[year].books[month].map((book) => (
                  <li>
                    <h3>
                      <a href={`/book-log/${book.slug}`}>
                        {book.data.title} <span>by {book.data.author}</span>
                      </a>
                    </h3>
                  </li>
                ))}
              </ul>
            </details>
          ))}
        </details>
      ))
  }
  <div class="disclaimer">
    <p>
      This list is incomplete. I'm working to get all of the 2024 data in here,
      at least.
    </p>
    <p>More to come!</p>
  </div>
</BaseLayout>

<style>
  h3 {
    color: var(--text-primary);
    font-size: 1rem;

    a {
      color: currentColor;
      text-decoration-color: var(--tint-color);

      span {
        font-weight: normal;
        color: var(--text-secondary);
      }
    }
  }

  details {
    margin: 16px 0;
  }

  summary {
    font-size: 1.25rem;
    margin: 8px 0;
    cursor: default;

    span {
      opacity: 0.5;
    }
  }

  .months {
    margin-left: 16px;
  }

  ul {
    margin-left: 12px;
    margin-bottom: 24px;
  }

  .disclaimer {
    margin-top: 48px;
    background-color: var(--background-secondary);
    padding: 16px;
    border-radius: 12px;
    font-size: 0.9rem;
    line-height: 1;
    text-align: center;
    font-style: italic;

    p {
      line-height: 1.2rem;
      text-wrap: balance;
    }
  }
</style>

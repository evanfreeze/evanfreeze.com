---
import "../../styles/global.css"
import { getCollection, type CollectionEntry } from "astro:content"
import BaseLayout from "../../layouts/BaseLayout.astro"
import TagList from "../../components/TagList.astro"

export async function getStaticPaths() {
  const allBooks = await getCollection("books")
  return allBooks.map((book) => ({
    params: { slug: book.slug },
    props: { book },
  }))
}

interface Props {
  book: CollectionEntry<"book">
  readingDuration: string
}

const { book } = Astro.props
const typeTag = `${book.data.medium} book`
const tags = book.data.tags ? [typeTag, ...book.data.tags] : [typeTag]
const { Content } = await book.render()
const readingDuration = (() => {
  // adjusting time forward to get around utc/central mismtach
  const roughlyTwelveHours = 1000 * 60 * 60 * 12
  const startTime = new Date(book.data.startedReading).getTime()
  const adjustedStartTime = startTime + roughlyTwelveHours
  const start = new Date(adjustedStartTime).toDateString()
  const finishTime = book.data.finishedReading
    ? new Date(book.data.finishedReading).getTime()
    : null
  const adjustedFinishTime = finishTime ? finishTime + roughlyTwelveHours : null
  const finish = adjustedFinishTime
    ? new Date(adjustedFinishTime).toDateString()
    : null

  if (finish) {
    return `Read from ${start} to ${finish}`
  } else {
    return `Started reading on ${start}`
  }
})()
---

<BaseLayout pageTitle={`Notes on "${book.data.title}" • Evan Freeze`}>
  <h1>
    {book.data.title}
    <span>by {book.data.author}</span>
  </h1>
  <p class="subtitle">{readingDuration}</p>
  <article>
    <Content />
    <TagList tags={tags} />
  </article>
  <a class="back-to-list-link" href="/book-log">← All Books</a>
</BaseLayout>

<style>
  h1 span {
    font-weight: normal;
    color: var(--text-secondary);
  }
</style>
